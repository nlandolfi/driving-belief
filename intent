#!/usr/bin/env python

import sys
import cPickle as pickle
import time

import theano as th
import numpy as np

import world
import feature
import utils

th.config.optimizer_verbose = True
th.config.allow_gc = False
th.config.optimizer = 'fast_compile'
th.config.mode = 'FAST_COMPILE'

epochs = 40

weights = [
        (100, 100),
        (100, 30),
        (100, 50),
]

explores = [
        0, 20, 40, 60, 80,
]

# modified to put double weight on fences
theta_stay_on_road     = [1., -100., 10., 100., 5., -50.]

if __name__ == '__main__':
    theta_explore = utils.scalar()
    w = world.intent(merge=True, multi=True, belief=True, active=True, hold_weight=10., theta_explore=theta_explore, theta_robot=theta_stay_on_road)

    for explore in explores:
        theta_explore.set_value(explore)

        num_cars = len(w.cars)
        controls = [[] for i in range(num_cars)]
        states = [[] for i in range(num_cars)]
        beliefs = [[] for i in range(num_cars)]

        for t in range(epochs):
            print("t = ", t)
            for car in w.cars:
                car.control(0,0)
            for car, hist in zip(w.cars, controls):
                hist.append(car.u)
            for car in w.cars:
                car.move()
            for car, hist in zip(w.cars, states):
                hist.append(car.x)
            for car, hist in zip(w.cars, beliefs):
                if hasattr(car, 'log_ps'):
                    hist.append(np.asarray([np.exp(log_p.get_value()) for log_p in car.log_ps]))

        with open('data/%s-%d-%d.pickle'%("intent", theta_explore.get_value(), int(time.time())), 'w') as f:
            pickle.dump((controls, states, beliefs), f)

        for car in w.cars:
            car.reset()
